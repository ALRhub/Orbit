#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 5000)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (207.00135620070836, 239.62035593271173, 202.8741148744194)
                double3 target = (-9.497254340425371, 23.121750559016675, -13.624495666714296)
            }
            dictionary Right = {
                double3 position = (-5000, 0, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 5000, 0)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./box.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "push_box_v1_file"
    metersPerUnit = 0.001
    upAxis = "Y"
)

def Xform "push_box_v1_file" (
    delete apiSchemas = ["PhysicsMassAPI"]
    prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
)
{
    bool physics:kinematicEnabled = 0
    bool physics:rigidBodyEnabled = 1
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0, -1, 0), (0, 1, 0, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Material "grey"
    {
        token outputs:surface.connect = </push_box_v1_file/grey/F_297076f8fb21423d8634fd9fb3a3877d_shader.outputs:surface>

        def Shader "F_297076f8fb21423d8634fd9fb3a3877d_shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:clearcoatRoughness = 0.01 (
                customData = {
                    float default = 0.01
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            color3f inputs:diffuseColor = (0.3500003, 0.3500003, 0.3500003) (
                customData = {
                    float3 default = (0.18, 0.18, 0.18)
                }
                hidden = false
                renderType = "color"
            )
            color3f inputs:emissiveColor = (0.17578113, 0.0019531241, 0.0019531241) (
                customData = {
                    float3 default = (0, 0, 0)
                }
                hidden = false
                renderType = "color"
            )
            float inputs:ior = 50 (
                customData = {
                    float default = 1.5
                    dictionary omni = {
                        dictionary kit = {
                            dictionary property = {
                                dictionary usd = {
                                    float2 soft_range_ui = (1, 50)
                                }
                            }
                        }
                    }
                    dictionary range = {
                        float max = 3.4028235e38
                        float min = 0
                    }
                    dictionary soft_range = {
                        float max = 5
                        float min = 1
                    }
                }
                hidden = false
            )
            float inputs:metallic = 1 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:occlusion = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                doc = """This parameter is unused.
"""
                hidden = false
            )
            float inputs:opacity = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:opacityThreshold = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:roughness = 0.264575 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            color3f inputs:specularColor = (0.9999999, 0.9999999, 0.9999999) (
                customData = {
                    float3 default = (0, 0, 0)
                }
                hidden = false
                renderType = "color"
            )
            int inputs:useSpecularWorkflow = 0 (
                customData = {
                    int default = 0
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                    string widgetType = "checkBox"
                }
                hidden = false
            )
            token outputs:surface
        }
    }

    def Material "red"
    {
        token outputs:surface.connect = </push_box_v1_file/red/F_dc14d3e9b0264655be7c56051c885eb9_shader.outputs:surface>

        def Shader "F_dc14d3e9b0264655be7c56051c885eb9_shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:clearcoatRoughness = 0.01 (
                customData = {
                    float default = 0.01
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            color3f inputs:diffuseColor = (0.5500005, 0.034999944, 0.02000006) (
                customData = {
                    float3 default = (0.18, 0.18, 0.18)
                }
                hidden = false
                renderType = "color"
            )
            color3f inputs:emissiveColor = (0.17578113, 0.0019531241, 0.0019531241) (
                customData = {
                    float3 default = (0, 0, 0)
                }
                hidden = false
                renderType = "color"
            )
            float inputs:ior = 1.5974027 (
                customData = {
                    float default = 1.5
                    dictionary range = {
                        float max = 3.4028235e38
                        float min = 0
                    }
                    dictionary soft_range = {
                        float max = 5
                        float min = 1
                    }
                }
                hidden = false
            )
            float inputs:metallic = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:occlusion = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                doc = """This parameter is unused.
"""
                hidden = false
            )
            float inputs:opacity = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:opacityThreshold = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:roughness = 0.178885 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            color3f inputs:specularColor = (0.9999999, 0.9999999, 0.9999999) (
                customData = {
                    float3 default = (0, 0, 0)
                }
                hidden = false
                renderType = "color"
            )
            int inputs:useSpecularWorkflow = 0 (
                customData = {
                    int default = 0
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                    string widgetType = "checkBox"
                }
                hidden = false
            )
            token outputs:surface
        }
    }

    def Material "blue"
    {
        token outputs:surface.connect = </push_box_v1_file/blue/F_a7a3db32474141f8bf2cfef7982103d6_shader.outputs:surface>

        def Shader "F_a7a3db32474141f8bf2cfef7982103d6_shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:clearcoatRoughness = 0.01 (
                customData = {
                    float default = 0.01
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            color3f inputs:diffuseColor = (0.030025508, 0.043912422, 0.30650946) (
                customData = {
                    float3 default = (0.18, 0.18, 0.18)
                }
                hidden = false
                renderType = "color"
            )
            color3f inputs:emissiveColor = (0.0019531241, 0.0019531241, 0.17578113) (
                customData = {
                    float3 default = (0, 0, 0)
                }
                hidden = false
                renderType = "color"
            )
            float inputs:ior = 1.5974027 (
                customData = {
                    float default = 1.5
                    dictionary range = {
                        float max = 3.4028235e38
                        float min = 0
                    }
                    dictionary soft_range = {
                        float max = 5
                        float min = 1
                    }
                }
                hidden = false
            )
            float inputs:metallic = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:occlusion = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                doc = """This parameter is unused.
"""
                hidden = false
            )
            float inputs:opacity = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:opacityThreshold = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            float inputs:roughness = 0.178885 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                hidden = false
            )
            color3f inputs:specularColor = (0.9999999, 0.9999999, 0.9999999) (
                customData = {
                    float3 default = (0, 0, 0)
                }
                hidden = false
                renderType = "color"
            )
            int inputs:useSpecularWorkflow = 0 (
                customData = {
                    int default = 0
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                    string widgetType = "checkBox"
                }
                hidden = false
            )
            token outputs:surface
        }
    }

    def Xform "box" (
        kind = "component"
    )
    {
        def Mesh "Body1" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxCookedDataAPI:convexHull", "PhysicsMassAPI"]
        )
        {
            uniform bool doubleSided = 0
            float3[] extent = [(-5, -5, -1), (5, 5, 1)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [1, 2, 0, 0, 2, 3, 5, 6, 4, 4, 6, 7, 9, 10, 8, 8, 10, 11, 13, 14, 12, 12, 14, 15, 17, 18, 16, 16, 18, 19, 21, 22, 20, 20, 22, 23]
            rel material:binding = </push_box_v1_file/red>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "vertex"
            )
            uniform token orientation = "rightHanded"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            float physics:mass = 2
            uchar[] physxCookedData:convexHull:buffer = [9, 28, 37, 141, 64, 246, 132, 109, 121, 146, 51, 197, 197, 162, 135, 240, 170, 78, 88, 83, 1, 67, 86, 88, 77, 14, 0, 0, 0, 0, 0, 0, 0, 73, 67, 69, 1, 67, 76, 72, 76, 9, 0, 0, 0, 8, 0, 0, 0, 12, 128, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 0, 0, 160, 192, 0, 0, 160, 64, 0, 0, 128, 191, 0, 0, 160, 64, 0, 0, 160, 64, 0, 0, 128, 191, 0, 0, 160, 64, 0, 0, 160, 192, 0, 0, 128, 191, 0, 0, 160, 192, 0, 0, 160, 192, 0, 0, 128, 191, 0, 0, 160, 192, 0, 0, 160, 192, 0, 0, 128, 63, 0, 0, 160, 192, 0, 0, 160, 64, 0, 0, 128, 63, 0, 0, 160, 64, 0, 0, 160, 192, 0, 0, 128, 63, 0, 0, 160, 64, 0, 0, 160, 64, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 4, 4, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 192, 4, 0, 4, 1, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 160, 192, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 160, 192, 12, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 16, 0, 4, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 192, 20, 0, 4, 0, 0, 1, 2, 3, 4, 5, 0, 3, 4, 3, 2, 6, 7, 1, 0, 5, 7, 5, 4, 6, 7, 6, 2, 1, 0, 3, 0, 5, 0, 2, 0, 1, 1, 4, 1, 3, 1, 2, 2, 5, 2, 4, 3, 5, 3, 4, 4, 5, 0, 1, 3, 0, 3, 5, 0, 2, 5, 0, 1, 2, 1, 2, 4, 1, 3, 4, 2, 4, 5, 3, 4, 5, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 5, 0, 5, 0, 0, 0, 3, 0, 4, 0, 2, 0, 6, 0, 6, 0, 4, 0, 7, 0, 1, 0, 5, 0, 7, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 160, 192, 0, 0, 160, 192, 0, 0, 128, 191, 0, 0, 160, 64, 0, 0, 160, 64, 0, 0, 128, 63, 0, 0, 72, 67, 171, 170, 216, 68, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 171, 170, 216, 68, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 85, 85, 80, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 160, 64, 0, 0, 128, 63, 0, 0, 128, 63]
            point3f[] points = [(5, 5, -1), (5, -5, -1), (-5, -5, -1), (-5, 5, -1), (5, -5, -1), (5, -5, 1), (-5, -5, 1), (-5, -5, -1), (-5, -5, -1), (-5, -5, 1), (-5, 5, 1), (-5, 5, -1), (-5, 5, -1), (-5, 5, 1), (5, 5, 1), (5, 5, -1), (5, 5, -1), (5, 5, 1), (5, -5, 1), (5, -5, -1), (5, -5, 1), (5, 5, 1), (-5, 5, 1), (-5, -5, 1)]
            texCoord2f[] primvars:st = [(-5, 5), (-5, -5), (5, -5), (5, 5), (10, -1), (10, 1), (0, 1), (0, -1), (10, -1), (10, 1), (0, 1), (0, -1), (10, -1), (10, 1), (0, 1), (0, -1), (10, -1), (10, 1), (0, 1), (0, -1), (5, -5), (5, 5), (-5, 5), (-5, -5)] (
                interpolation = "vertex"
            )
            uniform token subdivisionScheme = "none"
            matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "Body2" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxCookedDataAPI:convexHull", "PhysicsMassAPI"]
        )
        {
            uniform bool doubleSided = 0
            float3[] extent = [(-5, -5.5, 0.35), (5, -4.5, 9.35)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [1, 2, 0, 0, 2, 3, 5, 6, 4, 4, 6, 7, 9, 10, 8, 8, 10, 11, 13, 14, 12, 12, 14, 15, 17, 18, 16, 16, 18, 19, 21, 22, 20, 20, 22, 23]
            rel material:binding = </push_box_v1_file/red>
            normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0)] (
                interpolation = "vertex"
            )
            uniform token orientation = "rightHanded"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            float physics:mass = 0.001
            uchar[] physxCookedData:convexHull:buffer = [9, 28, 59, 69, 86, 78, 212, 191, 110, 214, 112, 119, 193, 143, 121, 39, 9, 78, 88, 83, 1, 67, 86, 88, 77, 14, 0, 0, 0, 0, 0, 0, 0, 73, 67, 69, 1, 67, 76, 72, 76, 9, 0, 0, 0, 8, 0, 0, 0, 12, 128, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 0, 0, 160, 64, 0, 0, 176, 192, 154, 153, 21, 65, 0, 0, 160, 64, 0, 0, 176, 192, 51, 51, 179, 62, 0, 0, 160, 64, 0, 0, 144, 192, 51, 51, 179, 62, 0, 0, 160, 64, 0, 0, 144, 192, 154, 153, 21, 65, 0, 0, 160, 192, 0, 0, 144, 192, 51, 51, 179, 62, 0, 0, 160, 192, 0, 0, 176, 192, 51, 51, 179, 62, 0, 0, 160, 192, 0, 0, 144, 192, 154, 153, 21, 65, 0, 0, 160, 192, 0, 0, 176, 192, 154, 153, 21, 65, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 192, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 51, 51, 179, 62, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 144, 64, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 176, 192, 12, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 154, 153, 21, 193, 16, 0, 4, 1, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 192, 20, 0, 4, 0, 0, 1, 2, 3, 4, 2, 1, 5, 4, 6, 3, 2, 7, 5, 1, 0, 7, 0, 3, 6, 7, 6, 4, 5, 0, 3, 0, 1, 0, 2, 0, 4, 1, 2, 1, 3, 1, 5, 2, 5, 2, 4, 3, 5, 3, 4, 4, 5, 0, 3, 4, 0, 1, 3, 0, 1, 2, 0, 2, 4, 1, 2, 5, 1, 3, 5, 2, 4, 5, 3, 4, 5, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 2, 0, 1, 0, 5, 0, 5, 0, 4, 0, 4, 0, 6, 0, 6, 0, 3, 0, 7, 0, 5, 0, 0, 0, 7, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 160, 192, 0, 0, 176, 192, 64, 51, 179, 62, 0, 0, 160, 64, 0, 0, 144, 192, 154, 153, 21, 65, 0, 0, 180, 66, 52, 176, 155, 69, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 104, 40, 89, 69, 1, 104, 8, 69, 0, 0, 0, 128, 1, 104, 8, 69, 0, 248, 59, 69, 0, 0, 0, 0, 0, 0, 160, 192, 52, 51, 155, 64, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 0, 63, 0, 0, 160, 64, 0, 0, 0, 63, 0, 0, 0, 63]
            point3f[] points = [(-5, -4.5, 9.35), (5, -4.5, 9.35), (5, -4.5, 0.35), (-5, -4.5, 0.35), (5, -4.5, 9.35), (5, -5.5, 9.35), (5, -5.5, 0.35), (5, -4.5, 0.35), (5, -4.5, 0.35), (5, -5.5, 0.35), (-5, -5.5, 0.35), (-5, -4.5, 0.35), (-5, -4.5, 0.35), (-5, -5.5, 0.35), (-5, -5.5, 9.35), (-5, -4.5, 9.35), (-5, -4.5, 9.35), (-5, -5.5, 9.35), (5, -5.5, 9.35), (5, -4.5, 9.35), (5, -5.5, 9.35), (-5, -5.5, 9.35), (-5, -5.5, 0.35), (5, -5.5, 0.35)]
            texCoord2f[] primvars:st = [(4.5, -5), (4.5, 5), (-4.5, 5), (-4.5, -5), (9, -0.5), (9, 0.5), (0, 0.5), (0, -0.5), (10, -0.5), (10, 0.5), (0, 0.5), (0, -0.5), (9, -0.5), (9, 0.5), (0, 0.5), (0, -0.5), (10, -0.5), (10, 0.5), (0, 0.5), (0, -0.5), (-4.5, 5), (-4.5, -5), (4.5, -5), (4.5, 5)] (
                interpolation = "vertex"
            )
            uniform token subdivisionScheme = "none"
            matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "Body3" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxCookedDataAPI:convexHull", "PhysicsMassAPI"]
        )
        {
            uniform bool doubleSided = 0
            float3[] extent = [(4.5, -5, 0.35), (5.5, 5, 9.35)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [1, 2, 0, 0, 2, 3, 5, 6, 4, 4, 6, 7, 9, 10, 8, 8, 10, 11, 13, 14, 12, 12, 14, 15, 17, 18, 16, 16, 18, 19, 21, 22, 20, 20, 22, 23]
            rel material:binding = </push_box_v1_file/blue>
            normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "vertex"
            )
            uniform token orientation = "rightHanded"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            float physics:mass = 0.001
            uchar[] physxCookedData:convexHull:buffer = [9, 28, 63, 225, 40, 177, 211, 209, 27, 7, 1, 25, 53, 84, 218, 1, 62, 78, 88, 83, 1, 67, 86, 88, 77, 14, 0, 0, 0, 0, 0, 0, 0, 73, 67, 69, 1, 67, 76, 72, 76, 9, 0, 0, 0, 8, 0, 0, 0, 12, 128, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 0, 0, 176, 64, 0, 0, 160, 64, 154, 153, 21, 65, 0, 0, 176, 64, 0, 0, 160, 64, 51, 51, 179, 62, 0, 0, 144, 64, 0, 0, 160, 64, 51, 51, 179, 62, 0, 0, 144, 64, 0, 0, 160, 64, 154, 153, 21, 65, 0, 0, 144, 64, 0, 0, 160, 192, 51, 51, 179, 62, 0, 0, 176, 64, 0, 0, 160, 192, 51, 51, 179, 62, 0, 0, 144, 64, 0, 0, 160, 192, 154, 153, 21, 65, 0, 0, 176, 64, 0, 0, 160, 192, 154, 153, 21, 65, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 160, 192, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 51, 51, 179, 62, 4, 0, 4, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 64, 8, 0, 4, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 192, 12, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 154, 153, 21, 193, 16, 0, 4, 1, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 160, 192, 20, 0, 4, 0, 0, 1, 2, 3, 4, 2, 1, 5, 4, 6, 3, 2, 7, 5, 1, 0, 7, 0, 3, 6, 7, 6, 4, 5, 0, 3, 0, 1, 0, 2, 0, 4, 1, 2, 1, 3, 1, 5, 2, 5, 2, 4, 3, 5, 3, 4, 4, 5, 0, 3, 4, 0, 1, 3, 0, 1, 2, 0, 2, 4, 1, 2, 5, 1, 3, 5, 2, 4, 5, 3, 4, 5, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 2, 0, 1, 0, 5, 0, 5, 0, 4, 0, 4, 0, 6, 0, 6, 0, 3, 0, 7, 0, 5, 0, 0, 0, 7, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 144, 64, 0, 0, 160, 192, 64, 51, 179, 62, 0, 0, 176, 64, 0, 0, 160, 64, 154, 153, 21, 65, 0, 0, 180, 66, 104, 40, 89, 69, 0, 0, 0, 0, 1, 104, 8, 197, 0, 0, 0, 0, 52, 176, 155, 69, 0, 0, 0, 128, 1, 104, 8, 197, 0, 0, 0, 128, 0, 248, 59, 69, 0, 0, 160, 64, 0, 0, 0, 0, 52, 51, 155, 64, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 160, 64, 0, 0, 0, 63]
            point3f[] points = [(4.5, -5, 9.35), (4.5, 5, 9.35), (4.5, 5, 0.35), (4.5, -5, 0.35), (4.5, 5, 9.35), (5.5, 5, 9.35), (5.5, 5, 0.35), (4.5, 5, 0.35), (4.5, 5, 0.35), (5.5, 5, 0.35), (5.5, -5, 0.35), (4.5, -5, 0.35), (4.5, -5, 0.35), (5.5, -5, 0.35), (5.5, -5, 9.35), (4.5, -5, 9.35), (4.5, -5, 9.35), (5.5, -5, 9.35), (5.5, 5, 9.35), (4.5, 5, 9.35), (5.5, 5, 9.35), (5.5, -5, 9.35), (5.5, -5, 0.35), (5.5, 5, 0.35)]
            texCoord2f[] primvars:st = [(4.5, -5), (4.5, 5), (-4.5, 5), (-4.5, -5), (9, -0.5), (9, 0.5), (0, 0.5), (0, -0.5), (10, -0.5), (10, 0.5), (0, 0.5), (0, -0.5), (9, -0.5), (9, 0.5), (0, 0.5), (0, -0.5), (10, -0.5), (10, 0.5), (0, 0.5), (0, -0.5), (-4.5, 5), (-4.5, -5), (4.5, -5), (4.5, 5)] (
                interpolation = "vertex"
            )
            uniform token subdivisionScheme = "none"
            matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "Body4" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxCookedDataAPI:convexHull", "PhysicsMassAPI"]
        )
        {
            uniform bool doubleSided = 0
            float3[] extent = [(-5, 4.5, 0.35), (5, 5.5, 9.35)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [1, 2, 0, 0, 2, 3, 5, 6, 4, 4, 6, 7, 9, 10, 8, 8, 10, 11, 13, 14, 12, 12, 14, 15, 17, 18, 16, 16, 18, 19, 21, 22, 20, 20, 22, 23]
            rel material:binding = </push_box_v1_file/red>
            normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "vertex"
            )
            uniform token orientation = "rightHanded"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            float physics:mass = 0.001
            uchar[] physxCookedData:convexHull:buffer = [9, 28, 126, 98, 35, 111, 119, 9, 205, 4, 106, 209, 110, 190, 154, 186, 160, 78, 88, 83, 1, 67, 86, 88, 77, 14, 0, 0, 0, 0, 0, 0, 0, 73, 67, 69, 1, 67, 76, 72, 76, 9, 0, 0, 0, 8, 0, 0, 0, 12, 128, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 0, 0, 160, 192, 0, 0, 176, 64, 154, 153, 21, 65, 0, 0, 160, 192, 0, 0, 176, 64, 51, 51, 179, 62, 0, 0, 160, 192, 0, 0, 144, 64, 51, 51, 179, 62, 0, 0, 160, 192, 0, 0, 144, 64, 154, 153, 21, 65, 0, 0, 160, 64, 0, 0, 144, 64, 51, 51, 179, 62, 0, 0, 160, 64, 0, 0, 176, 64, 51, 51, 179, 62, 0, 0, 160, 64, 0, 0, 144, 64, 154, 153, 21, 65, 0, 0, 160, 64, 0, 0, 176, 64, 154, 153, 21, 65, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 192, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 51, 51, 179, 62, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 144, 64, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 176, 192, 12, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 154, 153, 21, 193, 16, 0, 4, 1, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 192, 20, 0, 4, 0, 0, 1, 2, 3, 4, 2, 1, 5, 4, 6, 3, 2, 7, 5, 1, 0, 7, 0, 3, 6, 7, 6, 4, 5, 0, 3, 0, 1, 0, 2, 0, 4, 1, 2, 1, 3, 1, 5, 2, 5, 2, 4, 3, 5, 3, 4, 4, 5, 0, 3, 4, 0, 1, 3, 0, 1, 2, 0, 2, 4, 1, 2, 5, 1, 3, 5, 2, 4, 5, 3, 4, 5, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 2, 0, 1, 0, 5, 0, 5, 0, 4, 0, 4, 0, 6, 0, 6, 0, 3, 0, 7, 0, 5, 0, 0, 0, 7, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 160, 192, 0, 0, 144, 64, 64, 51, 179, 62, 0, 0, 160, 64, 0, 0, 176, 64, 154, 153, 21, 65, 0, 0, 180, 66, 52, 176, 155, 69, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 104, 40, 89, 69, 1, 104, 8, 197, 0, 0, 0, 128, 1, 104, 8, 197, 0, 248, 59, 69, 0, 0, 0, 0, 0, 0, 160, 64, 52, 51, 155, 64, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 0, 63, 0, 0, 160, 64, 0, 0, 0, 63, 0, 0, 0, 63]
            point3f[] points = [(5, 4.5, 9.35), (-5, 4.5, 9.35), (-5, 4.5, 0.35), (5, 4.5, 0.35), (-5, 4.5, 9.35), (-5, 5.5, 9.35), (-5, 5.5, 0.35), (-5, 4.5, 0.35), (-5, 4.5, 0.35), (-5, 5.5, 0.35), (5, 5.5, 0.35), (5, 4.5, 0.35), (5, 4.5, 0.35), (5, 5.5, 0.35), (5, 5.5, 9.35), (5, 4.5, 9.35), (5, 4.5, 9.35), (5, 5.5, 9.35), (-5, 5.5, 9.35), (-5, 4.5, 9.35), (-5, 5.5, 9.35), (5, 5.5, 9.35), (5, 5.5, 0.35), (-5, 5.5, 0.35)]
            texCoord2f[] primvars:st = [(-4.5, 5), (-4.5, -5), (4.5, -5), (4.5, 5), (9, -0.5), (9, 0.5), (0, 0.5), (0, -0.5), (10, -0.5), (10, 0.5), (0, 0.5), (0, -0.5), (9, -0.5), (9, 0.5), (0, 0.5), (0, -0.5), (10, -0.5), (10, 0.5), (0, 0.5), (0, -0.5), (4.5, -5), (4.5, 5), (-4.5, 5), (-4.5, -5)] (
                interpolation = "vertex"
            )
            uniform token subdivisionScheme = "none"
            matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "Body5" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxCookedDataAPI:convexHull", "PhysicsMassAPI"]
        )
        {
            uniform bool doubleSided = 0
            float3[] extent = [(-5.5, -5, 0.35), (-4.5, 5, 9.35)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [1, 2, 0, 0, 2, 3, 5, 6, 4, 4, 6, 7, 9, 10, 8, 8, 10, 11, 13, 14, 12, 12, 14, 15, 17, 18, 16, 16, 18, 19, 21, 22, 20, 20, 22, 23]
            rel material:binding = </push_box_v1_file/red>
            normal3f[] normals = [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
                interpolation = "vertex"
            )
            uniform token orientation = "rightHanded"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            float physics:mass = 0.001
            uchar[] physxCookedData:convexHull:buffer = [9, 28, 147, 135, 223, 9, 145, 29, 120, 130, 131, 108, 142, 111, 238, 131, 204, 78, 88, 83, 1, 67, 86, 88, 77, 14, 0, 0, 0, 0, 0, 0, 0, 73, 67, 69, 1, 67, 76, 72, 76, 9, 0, 0, 0, 8, 0, 0, 0, 12, 128, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 0, 0, 176, 192, 0, 0, 160, 192, 154, 153, 21, 65, 0, 0, 176, 192, 0, 0, 160, 192, 51, 51, 179, 62, 0, 0, 144, 192, 0, 0, 160, 192, 51, 51, 179, 62, 0, 0, 144, 192, 0, 0, 160, 192, 154, 153, 21, 65, 0, 0, 144, 192, 0, 0, 160, 64, 51, 51, 179, 62, 0, 0, 176, 192, 0, 0, 160, 64, 51, 51, 179, 62, 0, 0, 144, 192, 0, 0, 160, 64, 154, 153, 21, 65, 0, 0, 176, 192, 0, 0, 160, 64, 154, 153, 21, 65, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 160, 192, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 51, 51, 179, 62, 4, 0, 4, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 64, 8, 0, 4, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 192, 12, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 154, 153, 21, 193, 16, 0, 4, 1, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 160, 192, 20, 0, 4, 0, 0, 1, 2, 3, 4, 2, 1, 5, 4, 6, 3, 2, 7, 5, 1, 0, 7, 0, 3, 6, 7, 6, 4, 5, 0, 3, 0, 1, 0, 2, 0, 4, 1, 2, 1, 3, 1, 5, 2, 5, 2, 4, 3, 5, 3, 4, 4, 5, 0, 3, 4, 0, 1, 3, 0, 1, 2, 0, 2, 4, 1, 2, 5, 1, 3, 5, 2, 4, 5, 3, 4, 5, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 2, 0, 1, 0, 5, 0, 5, 0, 4, 0, 4, 0, 6, 0, 6, 0, 3, 0, 7, 0, 5, 0, 0, 0, 7, 0, 6, 0, 7, 0, 0, 0, 0, 0, 0, 0, 176, 192, 0, 0, 160, 192, 64, 51, 179, 62, 0, 0, 144, 192, 0, 0, 160, 64, 154, 153, 21, 65, 0, 0, 180, 66, 104, 40, 89, 69, 0, 0, 0, 0, 1, 104, 8, 69, 0, 0, 0, 0, 52, 176, 155, 69, 0, 0, 0, 128, 1, 104, 8, 69, 0, 0, 0, 128, 0, 248, 59, 69, 0, 0, 160, 192, 0, 0, 0, 0, 52, 51, 155, 64, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 0, 63, 0, 0, 0, 63, 0, 0, 160, 64, 0, 0, 0, 63]
            point3f[] points = [(-4.5, 5, 9.35), (-4.5, -5, 9.35), (-4.5, -5, 0.35), (-4.5, 5, 0.35), (-4.5, -5, 9.35), (-5.5, -5, 9.35), (-5.5, -5, 0.35), (-4.5, -5, 0.35), (-4.5, -5, 0.35), (-5.5, -5, 0.35), (-5.5, 5, 0.35), (-4.5, 5, 0.35), (-4.5, 5, 0.35), (-5.5, 5, 0.35), (-5.5, 5, 9.35), (-4.5, 5, 9.35), (-4.5, 5, 9.35), (-5.5, 5, 9.35), (-5.5, -5, 9.35), (-4.5, -5, 9.35), (-5.5, -5, 9.35), (-5.5, 5, 9.35), (-5.5, 5, 0.35), (-5.5, -5, 0.35)]
            texCoord2f[] primvars:st = [(-4.5, 5), (-4.5, -5), (4.5, -5), (4.5, 5), (9, -0.5), (9, 0.5), (0, 0.5), (0, -0.5), (10, -0.5), (10, 0.5), (0, 0.5), (0, -0.5), (9, -0.5), (9, 0.5), (0, 0.5), (0, -0.5), (10, -0.5), (10, 0.5), (0, 0.5), (0, -0.5), (4.5, -5), (4.5, 5), (-4.5, 5), (-4.5, -5)] (
                interpolation = "vertex"
            )
            uniform token subdivisionScheme = "none"
            matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }
}

