#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50000.18140525073, -1.1102270526308792e-11, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (1.9300724278591586, 1.4661323978868817, 2.3920105280183313)
                double3 target = (0.0006672939272576173, -0.4632727360450184, 0.4626054401379165)
            }
            dictionary Right = {
                double3 position = (0, -50000.12939199805, -1.1102258977046653e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 0, 50001.11466311893)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./panda_rod.usda"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            int "rtx:externalFrameCounter" = 20080
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "panda"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "panda" (
    prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    bool physxArticulation:enabledSelfCollisions = 0
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Xform "panda_link0" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (3.7252903e-9, 3.4924597e-10, -1.4901161e-8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link0.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link0_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 87
            float drive:angular:physics:stiffness = 400
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link0>
            rel physics:body1 = </panda/panda_link1>
            point3f physics:localPos0 = (0, 0, 0.333)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, -0.70710677, 0)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -166.00307
            float physics:upperLimit = 166.00307
            float physxJoint:maxJointVelocity = 124.61832
        }
    }

    def PhysicsFixedJoint "rootJoint"
    {
        rel physics:body1 = </panda/panda_link0>
    }

    def Xform "panda_link1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (1.1641532e-10, 3.7252903e-9, 0.333)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link1.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link1_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 87
            float drive:angular:physics:stiffness = 400
            float drive:angular:physics:targetPosition = -57.2958
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link1>
            rel physics:body1 = </panda/panda_link2>
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, -0.49999997, -0.49999997, 0.49999997)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -101.001
            float physics:upperLimit = 101.001
            float physxJoint:maxJointVelocity = 124.61832
        }
    }

    def Xform "panda_link2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (-0.7071066, 0.70710695, -3.1584864e-23, 5.5879354e-9)
        double3 xformOp:scale = (1, 0.9999999657714589, 0.9999999657714589)
        float3 xformOp:translate = (9.349606e-10, -1.1175871e-8, 0.333)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link2.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link2_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint3" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 87
            float drive:angular:physics:stiffness = 400
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link2>
            rel physics:body1 = </panda/panda_link3>
            point3f physics:localPos0 = (0, -0.316, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, 0.49999997, -0.49999997, -0.49999997)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -166.00307
            float physics:upperLimit = 166.00307
            float physxJoint:maxJointVelocity = 124.61832
        }
    }

    def Xform "panda_link3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-1.1175871e-8, 5.5879354e-9, 0.649)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link3.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link3_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint4" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 87
            float drive:angular:physics:stiffness = 400
            float drive:angular:physics:targetPosition = -126.051
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link3>
            rel physics:body1 = </panda/panda_link4>
            point3f physics:localPos0 = (0.0825, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, 0.49999997, -0.49999997, -0.49999997)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -176.00117
            float physics:upperLimit = -3.9992452
            float physxJoint:maxJointVelocity = 124.61832
        }
    }

    def Xform "panda_link4" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (0.7071067, 0.7071068, 2.9802322e-8, 1.4901161e-8)
        double3 xformOp:scale = (1, 0.9999997971840948, 0.9999997971840948)
        float3 xformOp:translate = (0.08249999, 2.6077032e-8, 0.649)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link4.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link4_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint5" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 12
            float drive:angular:physics:stiffness = 400
            float drive:angular:physics:targetPosition = 0
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link4>
            rel physics:body1 = </panda/panda_link5>
            point3f physics:localPos0 = (-0.0825, 0.384, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, -0.49999997, -0.49999997, 0.49999997)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -166.00307
            float physics:upperLimit = 166.00307
            float physxJoint:maxJointVelocity = 149.542
        }
    }

    def Xform "panda_link5" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (7.4360287e-9, -6.7055225e-8, 1.0330001)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link5.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link5_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint6" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 12
            float drive:angular:physics:stiffness = 400
            float drive:angular:physics:targetPosition = 137.51
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link5>
            rel physics:body1 = </panda/panda_link6>
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, 0.49999997, -0.49999997, -0.49999997)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -1.0026761
            float physics:upperLimit = 215.00241
            float physxJoint:maxJointVelocity = 149.542
        }
    }

    def Xform "panda_link6" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (0.70710677, 0.70710677, -2.561137e-9, 2.0954758e-9)
        double3 xformOp:scale = (1, 0.9999997971840948, 0.9999997971840948)
        float3 xformOp:translate = (7.450581e-9, -4.8894435e-8, 1.033)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link6.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link6_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint7" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 12
            float drive:angular:physics:stiffness = 400
            float drive:angular:physics:targetPosition = 45.8366
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link6>
            rel physics:body1 = </panda/panda_link7>
            point3f physics:localPos0 = (0.088, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, 0.49999997, -0.49999997, -0.49999997)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -166.00307
            float physics:upperLimit = 166.00307
            float physxJoint:maxJointVelocity = 149.542
        }
    }

    def Xform "panda_link7" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (6.123234e-17, 1, 0, 0)
        double3 xformOp:scale = (1, 0.9999995231628702, 0.9999995231628702)
        float3 xformOp:translate = (0.08799998, -6.984919e-8, 1.033)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link7.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link7_collisions>
        )
        {
        }

        def PhysicsFixedJoint "panda_hand_joint"
        {
            rel physics:body0 = </panda/panda_link7>
            rel physics:body1 = </panda/panda_hand>
            point3f physics:localPos0 = (0, 0, 0.107)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.9238795, 0, 0, -0.38268346)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "panda_hand" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (-1.4551854e-11, 0.9238795, 0.38268346, -4.6566123e-10)
        double3 xformOp:scale = (1, 0.9999993997033982, 0.9999993997033982)
        float3 xformOp:translate = (0.08799998, -4.9709342e-8, 0.926)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_hand.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_hand_collisions>
        )
        {
        }

        def PhysicsPrismaticJoint "panda_finger_joint1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:linear"]
        )
        {
            float drive:linear:physics:damping = 100
            float drive:linear:physics:maxForce = 200
            float drive:linear:physics:stiffness = 1000000
            float drive:linear:physics:targetPosition = 0.04
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_hand>
            rel physics:body1 = </panda/panda_leftfinger>
            point3f physics:localPos0 = (0, 0, 0.0584)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, 0.70710677)
            quatf physics:localRot1 = (0.70710677, 0, 0, 0.70710677)
            float physics:lowerLimit = 0.04
            float physics:upperLimit = 0.04
            float physxJoint:maxJointVelocity = 0.2
        }

        def PhysicsPrismaticJoint "panda_finger_joint2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:linear"]
        )
        {
            float drive:linear:physics:damping = 100
            float drive:linear:physics:maxForce = 200
            float drive:linear:physics:stiffness = 1000000
            float drive:linear:physics:targetPosition = 0.04
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_hand>
            rel physics:body1 = </panda/panda_rightfinger>
            point3f physics:localPos0 = (0, 0, 0.0584)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, -0.70710677)
            quatf physics:localRot1 = (0.70710677, 0, 0, -0.70710677)
            float physics:lowerLimit = 0.04
            float physics:upperLimit = 0.04
            float physxJoint:maxJointVelocity = 0.2
        }

        def Mesh "Cylinder"
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [0, 1, 33, 32, 1, 2, 34, 33, 2, 3, 35, 34, 3, 4, 36, 35, 4, 5, 37, 36, 5, 6, 38, 37, 6, 7, 39, 38, 7, 8, 40, 39, 8, 9, 41, 40, 9, 10, 42, 41, 10, 11, 43, 42, 11, 12, 44, 43, 12, 13, 45, 44, 13, 14, 46, 45, 14, 15, 47, 46, 15, 16, 48, 47, 16, 17, 49, 48, 17, 18, 50, 49, 18, 19, 51, 50, 19, 20, 52, 51, 20, 21, 53, 52, 21, 22, 54, 53, 22, 23, 55, 54, 23, 24, 56, 55, 24, 25, 57, 56, 25, 26, 58, 57, 26, 27, 59, 58, 27, 28, 60, 59, 28, 29, 61, 60, 29, 30, 62, 61, 30, 31, 63, 62, 31, 0, 32, 63, 0, 64, 1, 1, 64, 2, 2, 64, 3, 3, 64, 4, 4, 64, 5, 5, 64, 6, 6, 64, 7, 7, 64, 8, 8, 64, 9, 9, 64, 10, 10, 64, 11, 11, 64, 12, 12, 64, 13, 13, 64, 14, 14, 64, 15, 15, 64, 16, 16, 64, 17, 17, 64, 18, 18, 64, 19, 19, 64, 20, 20, 64, 21, 21, 64, 22, 22, 64, 23, 23, 64, 24, 24, 64, 25, 25, 64, 26, 26, 64, 27, 27, 64, 28, 28, 64, 29, 29, 64, 30, 30, 64, 31, 31, 64, 0, 32, 33, 65, 33, 34, 65, 34, 35, 65, 35, 36, 65, 36, 37, 65, 37, 38, 65, 38, 39, 65, 39, 40, 65, 40, 41, 65, 41, 42, 65, 42, 43, 65, 43, 44, 65, 44, 45, 65, 45, 46, 65, 46, 47, 65, 47, 48, 65, 48, 49, 65, 49, 50, 65, 50, 51, 65, 51, 52, 65, 52, 53, 65, 53, 54, 65, 54, 55, 65, 55, 56, 65, 56, 57, 65, 57, 58, 65, 58, 59, 65, 59, 60, 65, 60, 61, 65, 61, 62, 65, 62, 63, 65, 63, 32, 65]
            normal3f[] normals = [(50, 0, 0), (49.03926, 9.754517, 0), (49.03926, 9.754517, 0), (50, 0, 0), (49.03926, 9.754517, 0), (46.193974, 19.13417, 0), (46.193974, 19.13417, 0), (49.03926, 9.754517, 0), (46.193974, 19.13417, 0), (41.57348, 27.778513, 0), (41.57348, 27.778513, 0), (46.193974, 19.13417, 0), (41.57348, 27.778513, 0), (35.35534, 35.35534, 0), (35.35534, 35.35534, 0), (41.57348, 27.778513, 0), (35.35534, 35.35534, 0), (27.778513, 41.57348, 0), (27.778513, 41.57348, 0), (35.35534, 35.35534, 0), (27.778513, 41.57348, 0), (19.13417, 46.193974, 0), (19.13417, 46.193974, 0), (27.778513, 41.57348, 0), (19.13417, 46.193974, 0), (9.754517, 49.03926, 0), (9.754517, 49.03926, 0), (19.13417, 46.193974, 0), (9.754517, 49.03926, 0), (3.061617e-15, 50, 0), (3.061617e-15, 50, 0), (9.754517, 49.03926, 0), (3.061617e-15, 50, 0), (-9.754517, 49.03926, 0), (-9.754517, 49.03926, 0), (3.061617e-15, 50, 0), (-9.754517, 49.03926, 0), (-19.13417, 46.193974, 0), (-19.13417, 46.193974, 0), (-9.754517, 49.03926, 0), (-19.13417, 46.193974, 0), (-27.778513, 41.57348, 0), (-27.778513, 41.57348, 0), (-19.13417, 46.193974, 0), (-27.778513, 41.57348, 0), (-35.35534, 35.35534, 0), (-35.35534, 35.35534, 0), (-27.778513, 41.57348, 0), (-35.35534, 35.35534, 0), (-41.57348, 27.778513, 0), (-41.57348, 27.778513, 0), (-35.35534, 35.35534, 0), (-41.57348, 27.778513, 0), (-46.193974, 19.13417, 0), (-46.193974, 19.13417, 0), (-41.57348, 27.778513, 0), (-46.193974, 19.13417, 0), (-49.03926, 9.754517, 0), (-49.03926, 9.754517, 0), (-46.193974, 19.13417, 0), (-49.03926, 9.754517, 0), (-50, 6.123234e-15, 0), (-50, 6.123234e-15, 0), (-49.03926, 9.754517, 0), (-50, 6.123234e-15, 0), (-49.03926, -9.754517, 0), (-49.03926, -9.754517, 0), (-50, 6.123234e-15, 0), (-49.03926, -9.754517, 0), (-46.193974, -19.13417, 0), (-46.193974, -19.13417, 0), (-49.03926, -9.754517, 0), (-46.193974, -19.13417, 0), (-41.57348, -27.778513, 0), (-41.57348, -27.778513, 0), (-46.193974, -19.13417, 0), (-41.57348, -27.778513, 0), (-35.35534, -35.35534, 0), (-35.35534, -35.35534, 0), (-41.57348, -27.778513, 0), (-35.35534, -35.35534, 0), (-27.778513, -41.57348, 0), (-27.778513, -41.57348, 0), (-35.35534, -35.35534, 0), (-27.778513, -41.57348, 0), (-19.13417, -46.193974, 0), (-19.13417, -46.193974, 0), (-27.778513, -41.57348, 0), (-19.13417, -46.193974, 0), (-9.754517, -49.03926, 0), (-9.754517, -49.03926, 0), (-19.13417, -46.193974, 0), (-9.754517, -49.03926, 0), (-9.184851e-15, -50, 0), (-9.184851e-15, -50, 0), (-9.754517, -49.03926, 0), (-9.184851e-15, -50, 0), (9.754517, -49.03926, 0), (9.754517, -49.03926, 0), (-9.184851e-15, -50, 0), (9.754517, -49.03926, 0), (19.13417, -46.193974, 0), (19.13417, -46.193974, 0), (9.754517, -49.03926, 0), (19.13417, -46.193974, 0), (27.778513, -41.57348, 0), (27.778513, -41.57348, 0), (19.13417, -46.193974, 0), (27.778513, -41.57348, 0), (35.35534, -35.35534, 0), (35.35534, -35.35534, 0), (27.778513, -41.57348, 0), (35.35534, -35.35534, 0), (41.57348, -27.778513, 0), (41.57348, -27.778513, 0), (35.35534, -35.35534, 0), (41.57348, -27.778513, 0), (46.193974, -19.13417, 0), (46.193974, -19.13417, 0), (41.57348, -27.778513, 0), (46.193974, -19.13417, 0), (49.03926, -9.754517, 0), (49.03926, -9.754517, 0), (46.193974, -19.13417, 0), (49.03926, -9.754517, 0), (50, 0, 0), (50, 0, 0), (49.03926, -9.754517, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.5, 0, -0.5), (0.4903926, 0.09754517, -0.5), (0.46193972, 0.1913417, -0.5), (0.4157348, 0.27778512, -0.5), (0.35355338, 0.35355338, -0.5), (0.27778512, 0.4157348, -0.5), (0.1913417, 0.46193972, -0.5), (0.09754517, 0.4903926, -0.5), (3.061617e-17, 0.5, -0.5), (-0.09754517, 0.4903926, -0.5), (-0.1913417, 0.46193972, -0.5), (-0.27778512, 0.4157348, -0.5), (-0.35355338, 0.35355338, -0.5), (-0.4157348, 0.27778512, -0.5), (-0.46193972, 0.1913417, -0.5), (-0.4903926, 0.09754517, -0.5), (-0.5, 6.123234e-17, -0.5), (-0.4903926, -0.09754517, -0.5), (-0.46193972, -0.1913417, -0.5), (-0.4157348, -0.27778512, -0.5), (-0.35355338, -0.35355338, -0.5), (-0.27778512, -0.4157348, -0.5), (-0.1913417, -0.46193972, -0.5), (-0.09754517, -0.4903926, -0.5), (-9.184851e-17, -0.5, -0.5), (0.09754517, -0.4903926, -0.5), (0.1913417, -0.46193972, -0.5), (0.27778512, -0.4157348, -0.5), (0.35355338, -0.35355338, -0.5), (0.4157348, -0.27778512, -0.5), (0.46193972, -0.1913417, -0.5), (0.4903926, -0.09754517, -0.5), (0.5, 0, 0.5), (0.4903926, 0.09754517, 0.5), (0.46193972, 0.1913417, 0.5), (0.4157348, 0.27778512, 0.5), (0.35355338, 0.35355338, 0.5), (0.27778512, 0.4157348, 0.5), (0.1913417, 0.46193972, 0.5), (0.09754517, 0.4903926, 0.5), (3.061617e-17, 0.5, 0.5), (-0.09754517, 0.4903926, 0.5), (-0.1913417, 0.46193972, 0.5), (-0.27778512, 0.4157348, 0.5), (-0.35355338, 0.35355338, 0.5), (-0.4157348, 0.27778512, 0.5), (-0.46193972, 0.1913417, 0.5), (-0.4903926, 0.09754517, 0.5), (-0.5, 6.123234e-17, 0.5), (-0.4903926, -0.09754517, 0.5), (-0.46193972, -0.1913417, 0.5), (-0.4157348, -0.27778512, 0.5), (-0.35355338, -0.35355338, 0.5), (-0.27778512, -0.4157348, 0.5), (-0.1913417, -0.46193972, 0.5), (-0.09754517, -0.4903926, 0.5), (-9.184851e-17, -0.5, 0.5), (0.09754517, -0.4903926, 0.5), (0.1913417, -0.46193972, 0.5), (0.27778512, -0.4157348, 0.5), (0.35355338, -0.35355338, 0.5), (0.4157348, -0.27778512, 0.5), (0.46193972, -0.1913417, 0.5), (0.4903926, -0.09754517, 0.5), (0, 0, -0.5), (0, 0, 0.5)]
            float2[] primvars:st = [(1, 0), (0.96875, 0), (0.96875, 1), (1, 1), (0.96875, 0), (0.9375, 0), (0.9375, 1), (0.96875, 1), (0.9375, 0), (0.90625, 0), (0.90625, 1), (0.9375, 1), (0.90625, 0), (0.875, 0), (0.875, 1), (0.90625, 1), (0.875, 0), (0.84375, 0), (0.84375, 1), (0.875, 1), (0.84375, 0), (0.8125, 0), (0.8125, 1), (0.84375, 1), (0.8125, 0), (0.78125, 0), (0.78125, 1), (0.8125, 1), (0.78125, 0), (0.75, 0), (0.75, 1), (0.78125, 1), (0.75, 0), (0.71875, 0), (0.71875, 1), (0.75, 1), (0.71875, 0), (0.6875, 0), (0.6875, 1), (0.71875, 1), (0.6875, 0), (0.65625, 0), (0.65625, 1), (0.6875, 1), (0.65625, 0), (0.625, 0), (0.625, 1), (0.65625, 1), (0.625, 0), (0.59375, 0), (0.59375, 1), (0.625, 1), (0.59375, 0), (0.5625, 0), (0.5625, 1), (0.59375, 1), (0.5625, 0), (0.53125, 0), (0.53125, 1), (0.5625, 1), (0.53125, 0), (0.5, 0), (0.5, 1), (0.53125, 1), (0.5, 0), (0.46875, 0), (0.46875, 1), (0.5, 1), (0.46875, 0), (0.4375, 0), (0.4375, 1), (0.46875, 1), (0.4375, 0), (0.40625, 0), (0.40625, 1), (0.4375, 1), (0.40625, 0), (0.375, 0), (0.375, 1), (0.40625, 1), (0.375, 0), (0.34375, 0), (0.34375, 1), (0.375, 1), (0.34375, 0), (0.3125, 0), (0.3125, 1), (0.34375, 1), (0.3125, 0), (0.28125, 0), (0.28125, 1), (0.3125, 1), (0.28125, 0), (0.25, 0), (0.25, 1), (0.28125, 1), (0.25, 0), (0.21875, 0), (0.21875, 1), (0.25, 1), (0.21875, 0), (0.1875, 0), (0.1875, 1), (0.21875, 1), (0.1875, 0), (0.15625, 0), (0.15625, 1), (0.1875, 1), (0.15625, 0), (0.125, 0), (0.125, 1), (0.15625, 1), (0.125, 0), (0.09375, 0), (0.09375, 1), (0.125, 1), (0.09375, 0), (0.0625, 0), (0.0625, 1), (0.09375, 1), (0.0625, 0), (0.03125, 0), (0.03125, 1), (0.0625, 1), (0.03125, 0), (0, 0), (0, 1), (0.03125, 1), (0, 0), (0, 1), (0.03125, 0), (0.03125, 0), (0.03125, 1), (0.0625, 0), (0.0625, 0), (0.0625, 1), (0.09375, 0), (0.09375, 0), (0.09375, 1), (0.125, 0), (0.125, 0), (0.125, 1), (0.15625, 0), (0.15625, 0), (0.15625, 1), (0.1875, 0), (0.1875, 0), (0.1875, 1), (0.21875, 0), (0.21875, 0), (0.21875, 1), (0.25, 0), (0.25, 0), (0.25, 1), (0.28125, 0), (0.28125, 0), (0.28125, 1), (0.3125, 0), (0.3125, 0), (0.3125, 1), (0.34375, 0), (0.34375, 0), (0.34375, 1), (0.375, 0), (0.375, 0), (0.375, 1), (0.40625, 0), (0.40625, 0), (0.40625, 1), (0.4375, 0), (0.4375, 0), (0.4375, 1), (0.46875, 0), (0.46875, 0), (0.46875, 1), (0.5, 0), (0.5, 0), (0.5, 1), (0.53125, 0), (0.53125, 0), (0.53125, 1), (0.5625, 0), (0.5625, 0), (0.5625, 1), (0.59375, 0), (0.59375, 0), (0.59375, 1), (0.625, 0), (0.625, 0), (0.625, 1), (0.65625, 0), (0.65625, 0), (0.65625, 1), (0.6875, 0), (0.6875, 0), (0.6875, 1), (0.71875, 0), (0.71875, 0), (0.71875, 1), (0.75, 0), (0.75, 0), (0.75, 1), (0.78125, 0), (0.78125, 0), (0.78125, 1), (0.8125, 0), (0.8125, 0), (0.8125, 1), (0.84375, 0), (0.84375, 0), (0.84375, 1), (0.875, 0), (0.875, 0), (0.875, 1), (0.90625, 0), (0.90625, 0), (0.90625, 1), (0.9375, 0), (0.9375, 0), (0.9375, 1), (0.96875, 0), (0.96875, 0), (0.96875, 1), (1, 0), (0, 0), (0, 1), (0.03125, 0), (0.03125, 0), (0.03125, 1), (0.0625, 0), (0.0625, 0), (0.0625, 1), (0.09375, 0), (0.09375, 0), (0.09375, 1), (0.125, 0), (0.125, 0), (0.125, 1), (0.15625, 0), (0.15625, 0), (0.15625, 1), (0.1875, 0), (0.1875, 0), (0.1875, 1), (0.21875, 0), (0.21875, 0), (0.21875, 1), (0.25, 0), (0.25, 0), (0.25, 1), (0.28125, 0), (0.28125, 0), (0.28125, 1), (0.3125, 0), (0.3125, 0), (0.3125, 1), (0.34375, 0), (0.34375, 0), (0.34375, 1), (0.375, 0), (0.375, 0), (0.375, 1), (0.40625, 0), (0.40625, 0), (0.40625, 1), (0.4375, 0), (0.4375, 0), (0.4375, 1), (0.46875, 0), (0.46875, 0), (0.46875, 1), (0.5, 0), (0.5, 0), (0.5, 1), (0.53125, 0), (0.53125, 0), (0.53125, 1), (0.5625, 0), (0.5625, 0), (0.5625, 1), (0.59375, 0), (0.59375, 0), (0.59375, 1), (0.625, 0), (0.625, 0), (0.625, 1), (0.65625, 0), (0.65625, 0), (0.65625, 1), (0.6875, 0), (0.6875, 0), (0.6875, 1), (0.71875, 0), (0.71875, 0), (0.71875, 1), (0.75, 0), (0.75, 0), (0.75, 1), (0.78125, 0), (0.78125, 0), (0.78125, 1), (0.8125, 0), (0.8125, 0), (0.8125, 1), (0.84375, 0), (0.84375, 0), (0.84375, 1), (0.875, 0), (0.875, 0), (0.875, 1), (0.90625, 0), (0.90625, 0), (0.90625, 1), (0.9375, 0), (0.9375, 0), (0.9375, 1), (0.96875, 0), (0.96875, 0), (0.96875, 1), (1, 0)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.01, 0.01, 0.15)
            double3 xformOp:translate = (0, 0, 0.1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "panda_leftfinger" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (6.123234e-17, 0.9238795, 0.38268346, -6.3372193e-31)
        double3 xformOp:scale = (1, 0.9999993997033982, 0.9999993997033982)
        float3 xformOp:translate = (0.08799998, -4.9360096e-8, 0.8676)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_leftfinger.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_leftfinger_collisions>
        )
        {
        }
    }

    def Xform "panda_rightfinger" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (6.123234e-17, 0.92387956, 0.38268343, -1.1990686e-30)
        double3 xformOp:scale = (1, 0.9999993997033982, 0.9999993997033982)
        float3 xformOp:translate = (0.087999985, -5.029142e-8, 0.8676)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_rightfinger.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_rightfinger_collisions>
        )
        {
        }
    }
}

