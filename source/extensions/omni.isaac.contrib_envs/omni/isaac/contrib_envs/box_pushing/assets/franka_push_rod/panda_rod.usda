#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50000.18140525073, -1.1102270526308792e-11, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (1.3349707424589612, 1.327998942449076, 2.149815436799005)
                double3 target = (-0.2692909775403547, -0.2762627775502384, 0.545553755090578)
            }
            dictionary Right = {
                double3 position = (0, -50000.12939199805, -1.1102258977046653e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 0, 50001.11466311893)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:dynamicDiffuseGI:probeCounts" = (6, 6, 6)
            float3 "rtx:dynamicDiffuseGI:probeGridOrigin" = (-210, -250, -10)
            float3 "rtx:dynamicDiffuseGI:volumeSize" = (600, 440, 300)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:lightspeed:material:overrideAlbedo" = (0.5, 0.5, 0.5)
            float3 "rtx:lightspeed:material:overrideEmissiveColor" = (0.5, 0.5, 0.5)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "panda"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "panda" (
    prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    bool physxArticulation:enabledSelfCollisions = 0

    def Xform "panda_link0" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (3.7252903e-9, 3.4924597e-10, -1.4901161e-8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link0.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link0_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 87
            float drive:angular:physics:stiffness = 400
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link0>
            rel physics:body1 = </panda/panda_link1>
            point3f physics:localPos0 = (0, 0, 0.333)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, -0.70710677, 0)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -166.00307
            float physics:upperLimit = 166.00307
            float physxJoint:maxJointVelocity = 124.61832
        }
    }

    def PhysicsFixedJoint "rootJoint"
    {
        rel physics:body1 = </panda/panda_link0>
    }

    def Xform "panda_link1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (1.1641532e-10, 3.7252903e-9, 0.333)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link1.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link1_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 87
            float drive:angular:physics:stiffness = 400
            float drive:angular:physics:targetPosition = -57.2958
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link1>
            rel physics:body1 = </panda/panda_link2>
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, -0.49999997, -0.49999997, 0.49999997)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -101.001
            float physics:upperLimit = 101.001
            float physxJoint:maxJointVelocity = 124.61832
        }
    }

    def Xform "panda_link2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (-0.7071066, 0.70710695, -3.1584864e-23, 5.5879354e-9)
        double3 xformOp:scale = (1, 0.9999999657714589, 0.9999999657714589)
        float3 xformOp:translate = (9.349606e-10, -1.1175871e-8, 0.333)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link2.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link2_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint3" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 87
            float drive:angular:physics:stiffness = 400
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link2>
            rel physics:body1 = </panda/panda_link3>
            point3f physics:localPos0 = (0, -0.316, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, 0.49999997, -0.49999997, -0.49999997)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -166.00307
            float physics:upperLimit = 166.00307
            float physxJoint:maxJointVelocity = 124.61832
        }
    }

    def Xform "panda_link3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-1.1175871e-8, 5.5879354e-9, 0.649)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link3.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link3_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint4" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 87
            float drive:angular:physics:stiffness = 400
            float drive:angular:physics:targetPosition = -126.051
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link3>
            rel physics:body1 = </panda/panda_link4>
            point3f physics:localPos0 = (0.0825, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, 0.49999997, -0.49999997, -0.49999997)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -176.00117
            float physics:upperLimit = -3.9992452
            float physxJoint:maxJointVelocity = 124.61832
        }
    }

    def Xform "panda_link4" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (0.7071067, 0.7071068, 2.9802322e-8, 1.4901161e-8)
        double3 xformOp:scale = (1, 0.9999997971840948, 0.9999997971840948)
        float3 xformOp:translate = (0.08249999, 2.6077032e-8, 0.649)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link4.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link4_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint5" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 12
            float drive:angular:physics:stiffness = 400
            float drive:angular:physics:targetPosition = 0
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link4>
            rel physics:body1 = </panda/panda_link5>
            point3f physics:localPos0 = (-0.0825, 0.384, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, -0.49999997, -0.49999997, 0.49999997)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -166.00307
            float physics:upperLimit = 166.00307
            float physxJoint:maxJointVelocity = 149.542
        }
    }

    def Xform "panda_link5" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (7.4360287e-9, -6.7055225e-8, 1.0330001)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link5.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link5_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint6" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 12
            float drive:angular:physics:stiffness = 400
            float drive:angular:physics:targetPosition = 137.51
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link5>
            rel physics:body1 = </panda/panda_link6>
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, 0.49999997, -0.49999997, -0.49999997)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -1.0026761
            float physics:upperLimit = 215.00241
            float physxJoint:maxJointVelocity = 149.542
        }
    }

    def Xform "panda_link6" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (0.70710677, 0.70710677, -2.561137e-9, 2.0954758e-9)
        double3 xformOp:scale = (1, 0.9999997971840948, 0.9999997971840948)
        float3 xformOp:translate = (7.450581e-9, -4.8894435e-8, 1.033)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link6.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link6_collisions>
        )
        {
        }

        def PhysicsRevoluteJoint "panda_joint7" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 80
            float drive:angular:physics:maxForce = 12
            float drive:angular:physics:stiffness = 400
            float drive:angular:physics:targetPosition = 45.8366
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_link6>
            rel physics:body1 = </panda/panda_link7>
            point3f physics:localPos0 = (0.088, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, 0.49999997, -0.49999997, -0.49999997)
            quatf physics:localRot1 = (0.70710677, 0, -0.70710677, 0)
            float physics:lowerLimit = -166.00307
            float physics:upperLimit = 166.00307
            float physxJoint:maxJointVelocity = 149.542
        }
    }

    def Xform "panda_link7" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (6.123234e-17, 1, 0, 0)
        double3 xformOp:scale = (1, 0.9999995231628702, 0.9999995231628702)
        float3 xformOp:translate = (0.08799998, -6.984919e-8, 1.033)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_link7.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_link7_collisions>
        )
        {
        }

        def PhysicsFixedJoint "panda_hand_joint"
        {
            rel physics:body0 = </panda/panda_link7>
            rel physics:body1 = </panda/panda_hand>
            point3f physics:localPos0 = (0, 0, 0.107)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.9238795, 0, 0, -0.38268346)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "panda_hand" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (-1.4551854e-11, 0.9238795, 0.38268346, -4.6566123e-10)
        double3 xformOp:scale = (1, 0.9999993997033982, 0.9999993997033982)
        float3 xformOp:translate = (0.08799998, -4.9709342e-8, 0.926)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_hand.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_hand_collisions>
        )
        {
        }

        def PhysicsPrismaticJoint "panda_finger_joint1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:linear"]
        )
        {
            float drive:linear:physics:damping = 100
            float drive:linear:physics:maxForce = 200
            float drive:linear:physics:stiffness = 1000000
            float drive:linear:physics:targetPosition = 0.04
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_hand>
            rel physics:body1 = </panda/panda_leftfinger>
            point3f physics:localPos0 = (0, 0, 0.0584)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, 0.70710677)
            quatf physics:localRot1 = (0.70710677, 0, 0, 0.70710677)
            float physics:lowerLimit = 0.04
            float physics:upperLimit = 0.04
            float physxJoint:maxJointVelocity = 0.2
        }

        def PhysicsPrismaticJoint "panda_finger_joint2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:linear"]
        )
        {
            float drive:linear:physics:damping = 100
            float drive:linear:physics:maxForce = 200
            float drive:linear:physics:stiffness = 1000000
            float drive:linear:physics:targetPosition = 0.04
            uniform token physics:axis = "X"
            rel physics:body0 = </panda/panda_hand>
            rel physics:body1 = </panda/panda_rightfinger>
            point3f physics:localPos0 = (0, 0, 0.0584)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, -0.70710677)
            quatf physics:localRot1 = (0.70710677, 0, 0, -0.70710677)
            float physics:lowerLimit = 0.04
            float physics:upperLimit = 0.04
            float physxJoint:maxJointVelocity = 0.2
        }
    }

    def Xform "panda_leftfinger" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (6.123234e-17, 0.9238795, 0.38268346, -6.3372193e-31)
        double3 xformOp:scale = (1, 0.9999993997033982, 0.9999993997033982)
        float3 xformOp:translate = (0.08799998, -4.9360096e-8, 0.8676)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_leftfinger.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_leftfinger_collisions>
        )
        {
        }
    }

    def Xform "panda_rightfinger" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        float physics:density = 1000
        vector3f physics:velocity = (0, 0, 0)
        quatf xformOp:orient = (6.123234e-17, 0.92387956, 0.38268343, -1.1990686e-30)
        double3 xformOp:scale = (1, 0.9999993997033982, 0.9999993997033982)
        float3 xformOp:translate = (0.087999985, -5.029142e-8, 0.8676)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "visuals" (
            instanceable = true
            references = @./Props/panda_rightfinger.usd@</Root>
        )
        {
        }

        def "collisions" (
            instanceable = true
            references = @./Props/instanceable_collision_meshes.usd@</panda_rightfinger_collisions>
        )
        {
        }
    }
}

